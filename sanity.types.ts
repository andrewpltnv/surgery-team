/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch"
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: "sanity.imagePalette"
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions"
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: "sanity.fileAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: "geopoint"
  lat?: number
  lng?: number
  alt?: number
}

export type Area = {
  _type: "area"
  name?: string
  relatedArticle?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "procedureArticle"
  }
}

export type Reviews = {
  _id: string
  _type: "reviews"
  _createdAt: string
  _updatedAt: string
  _rev: string
  expert?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "expert"
  }
  reviewsArray?: Array<
    {
      _key: string
    } & Review
  >
}

export type Expert = {
  _id: string
  _type: "expert"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  schemaMarkup?: Array<
    | ({
        _key: string
      } & Article)
    | ({
        _key: string
      } & BreadcrumbList)
    | ({
        _key: string
      } & FaqPageType)
    | ({
        _key: string
      } & HowToType)
    | ({
        _key: string
      } & ImageObjectType)
    | ({
        _key: string
      } & LocalBusiness)
    | ({
        _key: string
      } & Organization)
    | ({
        _key: string
      } & PersonType)
    | ({
        _key: string
      } & ProductType)
    | ({
        _key: string
      } & RecipeType)
    | ({
        _key: string
      } & ReviewType)
    | ({
        _key: string
      } & SocialMediaPosting)
    | ({
        _key: string
      } & ServiceType)
    | ({
        _key: string
      } & VideoObjectType)
    | ({
        _key: string
      } & WebPageType)
    | ({
        _key: string
      } & WebsiteType)
  >
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  position?: string
  experience?: Experience
  areasOfExpertise?: Array<
    {
      _key: string
    } & Area
  >
  education?: Array<string>
  reviews?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "reviews"
  }
}

export type Experience = {
  _type: "experience"
  start?: number
  activity?: string
}

export type Review = {
  _type: "review"
  name?: string
  review?: string
  date?: string
  source?: string
}

export type Tag = {
  _id: string
  _type: "tag"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
}

export type ProcedureArticle = {
  _id: string
  _type: "procedureArticle"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  body?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: "span"
          _key: string
        }>
        style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote"
        listItem?: "bullet"
        markDefs?: Array<{
          href?: string
          _type: "link"
          _key: string
        }>
        level?: number
        _type: "block"
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: "image"
        _key: string
      }
  >
  tags?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "tag"
  }>
}

export type Category = {
  _id: string
  _type: "category"
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slug?: Slug
  description?: string
  articles?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "procedureArticle"
  }>
  experts?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "expert"
  }>
  contacts?: Array<string>
  accreditations?: Array<string>
}

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: "span"
        _key: string
      }>
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote"
      listItem?: "bullet"
      markDefs?: Array<{
        href?: string
        _type: "link"
        _key: string
      }>
      level?: number
      _type: "block"
      _key: string
    }
  | {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      alt?: string
      _type: "image"
      _key: string
    }
>

export type VideoObjectType = {
  _type: "videoObjectType"
  type?: string
  name?: string
  description?: string
  thumbnailUrl?: Array<string>
  uploadDate?: string
  contentUrl?: string
  embedUrl?: string
  publisher?: {
    type?: string
    id?: string
    name?: string
    logo?: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    }
  }
  potentialAction?: {
    type?: string
    seekToActionTargetUrl?: string
  }
  id?: string
}

export type ImageObjectType = {
  _type: "imageObjectType"
  type?: string
  name?: string
  caption?: string
  contentUrl?: string
  contentLocation?: string
  description?: string
  datePublished?: string
  author?: string
  id?: string
}

export type WebPageType = {
  _type: "webPageType"
  type?: string
  name?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  breadcrumb?: string
  publisher?: {
    type?: string
    id?: string
    name?: string
  }
  license?: string
  id?: string
}

export type HowToType = {
  _type: "howToType"
  type?: string
  name?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  description?: string
  totalTime?: string
  estimatedCost?: {
    type?: string
    currency?: string
    value?: string
  }
  supply?: Array<{
    type?: string
    name?: string
    _type: "howToSupply"
    _key: string
  }>
  tool?: Array<{
    type?: string
    name?: string
    _type: "howToTool"
    _key: string
  }>
  step?: Array<{
    type?: string
    name?: string
    text?: string
    url?: string
    _type: "howToStep"
    _key: string
  }>
  id?: string
}

export type RecipeType = {
  _type: "recipeType"
  type?: string
  name?: string
  image?: Array<{
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
    _key: string
  }>
  description?: string
  keywords?: string
  author?: {
    type?: string
    name?: string
  }
  datePublished?: string
  prepTime?: string
  cookTime?: string
  totalTime?: string
  recipeCategory?: string
  recipeCuisine?: string
  recipeYield?: string
  nutrition?: {
    type?: string
    servingSize?: string
    calories?: string
    fatContent?: string
  }
  recipeIngredient?: Array<string>
  recipeInstructions?: Array<{
    type?: string
    name?: string
    text?: string
    url?: string
    image?: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    }
    _type: "howToStep"
    _key: string
  }>
  aggregateRating?: {
    type?: string
    bestRating?: string
    worstRating?: string
  }
  review?: Array<{
    type?: string
    name?: string
    reviewBody?: string
    datePublished?: string
    author?: {
      type?: string
      name?: string
    }
    reviewRating?: {
      type?: string
      ratingValue?: string
    }
    publisher?: {
      type?: string
      name?: string
    }
    id?: string
    _type: "productReviewType"
    _key: string
  }>
  video?: {
    type?: string
    name?: string
    description?: string
    thumbnailUrl?: Array<string>
    uploadDate?: string
    contentUrl?: string
    embedUrl?: string
  }
  id?: string
}

export type FaqPageType = {
  _type: "faqPageType"
  type?: string
  mainEntity?: Array<{
    type?: string
    name?: string
    acceptedAnswer?: {
      type?: string
      text?: string
    }
    _type: "question"
    _key: string
  }>
  id?: string
}

export type WebsiteType = {
  _type: "websiteType"
  type?: string
  name?: string
  url?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  potentialAction?: {
    type?: string
    searchUrl?: string
    optionalString?: string
  }
  description?: string
  id?: string
}

export type ProductType = {
  _type: "productType"
  type?: string
  name?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  description?: string
  brand?: {
    type?: string
    name?: string
  }
  sku?: string
  gtin8?: string
  gtin13?: string
  gtin14?: string
  mpn?: string
  offers?: {
    type?: string
    priceCurrency?: string
    price?: string
    priceValidUntil?: string
    availability?: string
    itemCondition?: string
  }
  aggregateRating?: {
    type?: string
    bestRating?: string
    worstRating?: string
  }
  review?: Array<{
    type?: string
    name?: string
    reviewBody?: string
    datePublished?: string
    author?: {
      type?: string
      name?: string
    }
    reviewRating?: {
      type?: string
      ratingValue?: string
    }
    publisher?: {
      type?: string
      name?: string
    }
    id?: string
    _type: "productReviewType"
    _key: string
  }>
  id?: string
}

export type ServiceType = {
  _type: "serviceType"
  type?: string
  serviceType?: string
  slogan?: string
  url?: string
  logo?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  provider?: {
    type?: string
    name?: string
  }
  areaServed?: {
    type?: string
    name?: string
  }
  hasOfferCatalog?: {
    type?: string
    name?: string
    itemListElement?: Array<{
      type?: string
      name?: string
      itemListElement?: Array<{
        type?: string
        itemOffered?: {
          type?: string
          name?: string
        }
        _type: "offer"
        _key: string
      }>
      _type: "offerCatalog"
      _key: string
    }>
  }
  id?: string
}

export type ReviewType = {
  _type: "reviewType"
  type?: string
  name?: string
  reviewBody?: string
  datePublished?: string
  author?: {
    type?: string
    name?: string
  }
  itemReviewed?: {
    type?: string
    name?: string
  }
  reviewRating?: {
    type?: string
    ratingValue?: string
  }
  publisher?: {
    type?: string
    name?: string
  }
  id?: string
}

export type PersonType = {
  _type: "personType"
  type?: string
  name?: string
  url?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  jobTitle?: string
  worksFor?: {
    type?: string
    name?: string
  }
  description?: string
  email?: string
  telephone?: string
  gender?: string
  spouse?: string
  parent?: string
  birthDate?: string
  address?: {
    type?: string
    streetAddress?: string
    addressLocality?: string
    addressRegion?: string
    postalCode?: string
    addressCountry?: string
  }
  sameAs?: Array<string>
  id?: string
}

export type SocialMediaPosting = {
  _type: "socialMediaPosting"
  type?: string
  headline?: string
  description?: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  author?: {
    type?: "Person" | "Organization"
    id?: string
    name?: string
    url?: string
  }
  publisher?: {
    type?: string
    id?: string
    name?: string
    logo?: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    }
  }
  datePublished?: string
  dateModified?: string
  sharedContent?: Array<{
    type?: string
    headline?: string
    url?: string
    author?: {
      type?: "Person" | "Organization"
      id?: string
      name?: string
    }
    id?: string
    _type: "webPage"
    _key: string
  }>
  id?: string
}

export type BreadcrumbList = {
  _type: "breadcrumbList"
  type?: string
  id?: string
  itemListElement?: Array<{
    type?: string
    name?: string
    item?: string
    id?: string
    _type: "listItem"
    _key: string
  }>
}

export type LocalBusiness = {
  _type: "localBusiness"
  type?: string
  name?: string
  url?: string
  logo?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  priceRange?: string
  telephone?: string
  address?: {
    type?: string
    streetAddress?: string
    addressLocality?: string
    addressRegion?: string
    postalCode?: string
    addressCountry?: string
  }
  geo?: {
    type?: string
    latitude?: string
    longitude?: string
  }
  hasMap?: string
  openingHoursSpecification?: Array<{
    type?: string
    dayOfWeek?: Array<string>
    opens?: string
    closes?: string
    _type: "openingHoursSpecification"
    _key: string
  }>
  sameAs?: Array<string>
  id?: string
}

export type Organization = {
  _type: "organization"
  type?: string
  name?: string
  alternateName?: string
  url?: string
  logo?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  contactPoint?: Array<{
    type?: string
    telephone?: string
    contactType?:
      | "customer service"
      | "technical support"
      | "billing support"
      | "bill payment"
      | "sales"
      | "reservations"
      | 'credit card support"'
      | "emergency"
      | "baggage tracking"
      | "roadside assistance"
    contactOption?: Array<string>
    areaServed?: Array<string>
    availableLanguage?: Array<string>
    id?: string
    _type: "contactPoint"
    _key: string
  }>
  department?: Array<{
    type?: string
    name?: string
    address?: {
      type?: string
      streetAddress?: string
      addressLocality?: string
      addressRegion?: string
      postalCode?: string
      addressCountry?: string
    }
    id?: string
    _type: "department"
    _key: string
  }>
  sameAs?: Array<string>
  id?: string
}

export type Article = {
  _type: "article"
  type?: string
  headline?: string
  description?: string
  image?: Array<{
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
    _key: string
  }>
  author?: {
    type?: "Person" | "Organization"
    id?: string
    name?: string
    url?: string
  }
  publisher?: {
    type?: string
    id?: string
    name?: string
    logo?: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    }
  }
  datePublished?: string
  dateModified?: string
  id?: string
}

export type SchemaMarkup = Array<
  | ({
      _key: string
    } & Article)
  | ({
      _key: string
    } & BreadcrumbList)
  | ({
      _key: string
    } & FaqPageType)
  | ({
      _key: string
    } & HowToType)
  | ({
      _key: string
    } & ImageObjectType)
  | ({
      _key: string
    } & LocalBusiness)
  | ({
      _key: string
    } & Organization)
  | ({
      _key: string
    } & PersonType)
  | ({
      _key: string
    } & ProductType)
  | ({
      _key: string
    } & RecipeType)
  | ({
      _key: string
    } & ReviewType)
  | ({
      _key: string
    } & SocialMediaPosting)
  | ({
      _key: string
    } & ServiceType)
  | ({
      _key: string
    } & VideoObjectType)
  | ({
      _key: string
    } & WebPageType)
  | ({
      _key: string
    } & WebsiteType)
>

export type SanityImageCrop = {
  _type: "sanity.imageCrop"
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot"
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: "sanity.imageAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData"
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata"
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type MediaTag = {
  _id: string
  _type: "media.tag"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: "slug"
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Area
  | Reviews
  | Expert
  | Experience
  | Review
  | Tag
  | ProcedureArticle
  | Category
  | BlockContent
  | VideoObjectType
  | ImageObjectType
  | WebPageType
  | HowToType
  | RecipeType
  | FaqPageType
  | WebsiteType
  | ProductType
  | ServiceType
  | ReviewType
  | PersonType
  | SocialMediaPosting
  | BreadcrumbList
  | LocalBusiness
  | Organization
  | Article
  | SchemaMarkup
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | MediaTag
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/app/(main)/experts/api.tsx
// Variable: expertsSlugsQuery
// Query: *[_type=="expert"].slug.current
export type ExpertsSlugsQueryResult = Array<string | null>
// Variable: expertsQuery
// Query: *[_type=="expert"][]
export type ExpertsQueryResult = Array<{
  _id: string
  _type: "expert"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  slug?: Slug
  schemaMarkup?: Array<
    | ({
        _key: string
      } & Article)
    | ({
        _key: string
      } & BreadcrumbList)
    | ({
        _key: string
      } & FaqPageType)
    | ({
        _key: string
      } & HowToType)
    | ({
        _key: string
      } & ImageObjectType)
    | ({
        _key: string
      } & LocalBusiness)
    | ({
        _key: string
      } & Organization)
    | ({
        _key: string
      } & PersonType)
    | ({
        _key: string
      } & ProductType)
    | ({
        _key: string
      } & RecipeType)
    | ({
        _key: string
      } & ReviewType)
    | ({
        _key: string
      } & ServiceType)
    | ({
        _key: string
      } & SocialMediaPosting)
    | ({
        _key: string
      } & VideoObjectType)
    | ({
        _key: string
      } & WebPageType)
    | ({
        _key: string
      } & WebsiteType)
  >
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  position?: string
  experience?: Experience
  areasOfExpertise?: Array<
    {
      _key: string
    } & Area
  >
  education?: Array<string>
  reviews?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "reviews"
  }
}>
// Variable: expertBySlugQuery
// Query: *[_type=="expert" && slug.current == $slug][0]{  _id,  name,   slug,  image,  experience,  position,  education,  areasOfExpertise,  reviews->}
export type ExpertBySlugQueryResult = {
  _id: string
  name: string | null
  slug: Slug | null
  image: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  } | null
  experience: Experience | null
  position: string | null
  education: Array<string> | null
  areasOfExpertise: Array<
    {
      _key: string
    } & Area
  > | null
  reviews: {
    _id: string
    _type: "reviews"
    _createdAt: string
    _updatedAt: string
    _rev: string
    expert?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "expert"
    }
    reviewsArray?: Array<
      {
        _key: string
      } & Review
    >
  } | null
} | null

// Source: ./src/app/(main)/[category]/api.tsx
// Variable: categoriesSlugsQuery
// Query: *[_type=="category"].slug.current
export type CategoriesSlugsQueryResult = Array<string | null>
// Variable: categoriesQuery
// Query: *[_type=="category"][]{  _id,  "title": coalesce(title, name),  slug,  icon,  "description": coalesce(description, ""),  articles[]->{    _id,    title,    slug,  }}
export type CategoriesQueryResult = Array<{
  _id: string
  title: string | null
  slug: Slug | null
  icon: null
  description: string | ""
  articles: Array<{
    _id: string
    title: string | null
    slug: Slug | null
  }> | null
}>
// Variable: procedureArticlesSlugsByCategorySlug
// Query: *[_type=="category" && slug.current == $category][0].articles[]->{    "slug": slug.current  }
export type ProcedureArticlesSlugsByCategorySlugResult = Array<{
  slug: string | null
}> | null

// Source: ./src/app/(main)/[category]/[article]/api.tsx
// Variable: procedureArticleQuery
// Query: *[_type=="procedureArticle" && slug.current == $article][0]{    _id,    _type,    title,    slug,    "category": *[_type=="category" && references(^._id)][0]{      "slug":slug.current,      title    },    body[],		"schemaMarkup": coalesce(schemaMarkup[], [])	  }
export type ProcedureArticleQueryResult = {
  _id: string
  _type: "procedureArticle"
  title: string | null
  slug: Slug | null
  category: {
    slug: string | null
    title: string | null
  } | null
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: "span"
          _key: string
        }>
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal"
        listItem?: "bullet"
        markDefs?: Array<{
          href?: string
          _type: "link"
          _key: string
        }>
        level?: number
        _type: "block"
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: "reference"
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        alt?: string
        _type: "image"
        _key: string
      }
  > | null
  schemaMarkup: Array<never> | null
} | null

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type=="expert"].slug.current': ExpertsSlugsQueryResult
    '*[_type=="expert"][]': ExpertsQueryResult
    '*[_type=="expert" && slug.current == $slug][0]{\n  _id,\n  name, \n  slug,\n  image,\n  experience,\n  position,\n  education,\n  areasOfExpertise,\n  reviews->\n}': ExpertBySlugQueryResult
    '*[_type=="category"].slug.current': CategoriesSlugsQueryResult
    '*[_type=="category"][]{\n  _id,\n  "title": coalesce(title, name),\n  slug,\n  icon,\n  "description": coalesce(description, ""),\n  articles[]->{\n    _id,\n    title,\n    slug,\n  }\n}': CategoriesQueryResult
    '\n  *[_type=="category" && slug.current == $category][0].articles[]->{\n    "slug": slug.current\n  }\n': ProcedureArticlesSlugsByCategorySlugResult
    '\n  *[_type=="procedureArticle" && slug.current == $article][0]{\n    _id,\n    _type,\n    title,\n    slug,\n    "category": *[_type=="category" && references(^._id)][0]{\n      "slug":slug.current,\n      title\n    },\n    body[],\n\t\t"schemaMarkup": coalesce(schemaMarkup[], [])\t\n  }': ProcedureArticleQueryResult
  }
}
